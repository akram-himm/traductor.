// Script de test pour v√©rifier la correction du reset password
require('dotenv').config();
const axios = require('axios');
const crypto = require('crypto');

// Configuration
const BASE_URL = process.env.BACKEND_URL || 'http://localhost:3001';
const TEST_EMAIL = 'akramhimmich21@gmail.com'; // Changez pour votre email de test

async function testPasswordReset() {
  console.log('üîê TEST DE LA R√âINITIALISATION DE MOT DE PASSE');
  console.log('=============================================\n');
  console.log('URL Backend:', BASE_URL);
  console.log('Email de test:', TEST_EMAIL);
  console.log('');

  try {
    // √âtape 1 : Demander un reset de mot de passe
    console.log('üìß √âtape 1: Demande de r√©initialisation...');
    const forgotResponse = await axios.post(`${BASE_URL}/api/auth/forgot-password`, {
      email: TEST_EMAIL
    });

    console.log('‚úÖ R√©ponse:', forgotResponse.data.message);
    console.log('   Status:', forgotResponse.status);

    // Simuler un token pour le test (en production, il viendrait de l'email)
    const testToken = crypto.randomBytes(32).toString('hex');
    console.log('\nüîë Token de test g√©n√©r√©:', testToken);

    // √âtape 2 : Tester la r√©initialisation avec un nouveau mot de passe
    console.log('\nüîí √âtape 2: Test de r√©initialisation (cela √©chouera car le token est simul√©)...');

    try {
      const resetResponse = await axios.post(`${BASE_URL}/api/auth/reset-password`, {
        token: testToken,
        email: TEST_EMAIL,
        newPassword: 'NouveauMotDePasse123!'
      });

      console.log('‚úÖ R√©initialisation r√©ussie!');
      console.log('   R√©ponse:', resetResponse.data.message);
    } catch (resetError) {
      if (resetError.response && resetError.response.status === 400) {
        console.log('‚ö†Ô∏è  Erreur 400 (normale avec un token simul√©):', resetError.response.data.error);
        console.log('   C\'est normal car nous utilisons un token de test.');
        console.log('   En production, utilisez le vrai token re√ßu par email.');
      } else if (resetError.response && resetError.response.status === 500) {
        console.error('‚ùå ERREUR 500 - Le probl√®me persiste!');
        console.error('   Message:', resetError.response.data);
        console.error('   Il faut v√©rifier les logs du serveur.');
      } else {
        console.error('‚ùå Erreur inattendue:', resetError.message);
      }
    }

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
  }

  console.log('\n=== FIN DU TEST ===');
  console.log('\nüìù Notes:');
  console.log('- Si vous obtenez une erreur 400, c\'est normal (token simul√©)');
  console.log('- Si vous obtenez une erreur 500, le probl√®me persiste');
  console.log('- Pour un test complet, utilisez le vrai token re√ßu par email');
}

// Lancer le test
testPasswordReset();