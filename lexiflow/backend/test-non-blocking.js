// Test pour v√©rifier que l'envoi est maintenant non-bloquant
const fetch = require('node-fetch');

const API_URL = 'https://my-backend-api-cng7.onrender.com';
const testEmail = 'akramhimmich21@gmail.com';

async function testNonBlockingEmail() {
  console.log('üöÄ Test du nouvel envoi NON-BLOQUANT');
  console.log('=====================================');
  console.log('Email:', testEmail);
  console.log('API:', API_URL);
  console.log('\nAttendre 2-3 minutes pour le red√©ploiement Render...\n');

  // Test 1: V√©rifier la configuration
  console.log('1Ô∏è‚É£ V√©rification de la configuration email...');
  try {
    const configResponse = await fetch(`${API_URL}/api/auth/test-email-config`);
    const config = await configResponse.json();
    console.log('Configuration email sur Render:');
    console.log('  - Configur√©:', config.configured ? '‚úÖ' : '‚ùå');
    console.log('  - Host:', config.host);
    console.log('  - User:', config.user);
    console.log('  - Pass d√©fini:', config.passSet ? '‚úÖ' : '‚ùå');
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }

  console.log('\n2Ô∏è‚É£ Test forgot-password (devrait √™tre RAPIDE maintenant)...');
  const startTime = Date.now();

  try {
    const response = await fetch(`${API_URL}/api/auth/forgot-password`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: testEmail })
    });

    const elapsed = ((Date.now() - startTime) / 1000).toFixed(2);
    const data = await response.json();

    if (elapsed < 10) {
      console.log(`‚úÖ SUCC√àS! R√©ponse en ${elapsed}s (RAPIDE!)`);
    } else {
      console.log(`‚ö†Ô∏è  R√©ponse en ${elapsed}s (encore lent)`);
    }

    console.log('   Status:', response.status);
    console.log('   Message:', data.message);

    if (response.ok) {
      console.log('\nüìß L\'email sera envoy√© en arri√®re-plan');
      console.log('   ‚Üí V√©rifiez akramhimmich21@gmail.com');
      console.log('   ‚Üí L\'email peut prendre 1-2 minutes');
      console.log('   ‚Üí V√©rifiez aussi les SPAMS');
    }

  } catch (error) {
    const elapsed = ((Date.now() - startTime) / 1000).toFixed(2);
    console.log(`‚ùå Erreur apr√®s ${elapsed}s:`, error.message);
  }

  console.log('\n3Ô∏è‚É£ Test direct d\'envoi email...');
  try {
    const testResponse = await fetch(`${API_URL}/api/auth/test-email`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: testEmail })
    });

    const testData = await testResponse.json();
    console.log('‚úÖ Test email:', testData.message);
  } catch (error) {
    console.log('‚ùå Erreur test:', error.message);
  }
}

// Attendre un peu pour que Render red√©ploie
console.log('‚è≥ Attendez que Render red√©ploie (environ 2-3 minutes)...');
console.log('   Puis lancez ce script √† nouveau.');

testNonBlockingEmail();