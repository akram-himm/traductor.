require('dotenv').config();
const { stripe, PRICES } = require('./src/config/stripe');

console.log('üß™ Test direct de l\'int√©gration Stripe\n');

async function testStripeDirect() {
  try {
    // 1. V√©rifier la connexion Stripe
    console.log('1Ô∏è‚É£ V√©rification de la connexion Stripe...');
    const account = await stripe.accounts.retrieve();
    console.log('‚úÖ Connect√© au compte:', account.email);
    console.log('‚úÖ Mode:', account.charges_enabled ? 'LIVE' : 'TEST');
    
    // 2. Cr√©er un client de test
    console.log('\n2Ô∏è‚É£ Cr√©ation d\'un client de test...');
    const customer = await stripe.customers.create({
      email: 'test-stripe@lexiflow.com',
      name: 'Test User',
      metadata: {
        userId: 'test-user-123'
      }
    });
    console.log('‚úÖ Client cr√©√©:', customer.id);
    
    // 3. Cr√©er une session de checkout
    console.log('\n3Ô∏è‚É£ Cr√©ation d\'une session de paiement...');
    const session = await stripe.checkout.sessions.create({
      customer: customer.id,
      payment_method_types: ['card'],
      mode: 'subscription',
      line_items: [{
        price: PRICES.monthly,
        quantity: 1
      }],
      success_url: 'http://localhost:3000/success?session_id={CHECKOUT_SESSION_ID}',
      cancel_url: 'http://localhost:3000/cancel',
      metadata: {
        userId: 'test-user-123'
      },
      subscription_data: {
        trial_period_days: 7
      }
    });
    
    console.log('‚úÖ Session cr√©√©e avec succ√®s!');
    console.log('üÜî Session ID:', session.id);
    console.log('üîó URL de paiement:', session.url);
    
    // 4. Simuler la r√©cup√©ration d'une subscription
    console.log('\n4Ô∏è‚É£ Test de r√©cup√©ration d\'abonnement...');
    console.log('   (En production, ceci se ferait apr√®s le paiement via webhook)');
    
    // 5. Cr√©er une session de portail client
    console.log('\n5Ô∏è‚É£ Cr√©ation d\'une session de portail client...');
    const portalSession = await stripe.billingPortal.sessions.create({
      customer: customer.id,
      return_url: 'http://localhost:3000/account',
    });
    console.log('‚úÖ Portail client cr√©√©:', portalSession.url);
    
    console.log('\n‚ú® R√âSUM√â DES TESTS:');
    console.log('- ‚úÖ Connexion Stripe OK');
    console.log('- ‚úÖ Cr√©ation de client OK');
    console.log('- ‚úÖ Session de checkout OK');
    console.log('- ‚úÖ Portail client OK');
    console.log('\nüí° PROCHAINES √âTAPES:');
    console.log('1. Ouvrez l\'URL de paiement ci-dessus');
    console.log('2. Utilisez la carte de test: 4242 4242 4242 4242');
    console.log('3. Les webhooks recevront automatiquement les √©v√©nements');
    console.log('4. L\'utilisateur sera marqu√© comme Premium dans la base de donn√©es');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    if (error.type === 'StripeInvalidRequestError') {
      console.error('   D√©tails:', error.raw.message);
    }
  }
}

testStripeDirect();