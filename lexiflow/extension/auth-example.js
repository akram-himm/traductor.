// Exemple d'utilisation de l'authentification et des flashcards
// Copie ces exemples dans la console de la popup pour tester

// 1. INSCRIPTION
async function testRegister() {
  try {
    const result = await authAPI.register(
      'Test User',
      'test@example.com',
      'password123'
    );
    console.log('‚úÖ Inscription r√©ussie:', result);
  } catch (error) {
    console.error('‚ùå Erreur inscription:', error.message);
  }
}

// 2. CONNEXION
async function testLogin() {
  try {
    const result = await authAPI.login(
      'test@example.com',
      'password123'
    );
    console.log('‚úÖ Connexion r√©ussie:', result);
  } catch (error) {
    console.error('‚ùå Erreur connexion:', error.message);
  }
}

// 3. SAUVEGARDER UNE FLASHCARD
async function testSaveFlashcard() {
  try {
    const result = await flashcardSync.save({
      originalText: 'Hello',
      translatedText: 'Bonjour',
      sourceLanguage: 'en',
      targetLanguage: 'fr',
      context: 'Greeting',
      difficulty: 'easy'
    });
    
    if (result.success) {
      console.log('‚úÖ Flashcard sauvegard√©e:', result.data);
    } else {
      console.log('‚ùå √âchec:', result.reason, result.error);
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

// 4. CHARGER TOUTES LES FLASHCARDS
async function testLoadFlashcards() {
  try {
    const result = await flashcardSync.load();
    
    if (result.success) {
      console.log('‚úÖ Flashcards charg√©es:', result.data);
    } else {
      console.log('‚ùå √âchec:', result.reason);
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

// 5. SYNCHRONISER LES FLASHCARDS LOCALES
async function testSyncLocal() {
  try {
    const result = await flashcardSync.syncAll();
    
    if (result.success) {
      console.log(`‚úÖ Synchronisation: ${result.synced}/${result.total} flashcards`);
    } else {
      console.log('‚ùå √âchec:', result.reason);
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

// 6. V√âRIFIER LE TOKEN
async function checkAuth() {
  const token = await authAPI.getToken();
  const user = await authAPI.getCurrentUser();
  
  console.log('Token:', token ? '‚úÖ Pr√©sent' : '‚ùå Absent');
  console.log('Utilisateur:', user);
  
  if (token) {
    const isValid = await authAPI.verifyToken();
    console.log('Token valide:', isValid ? '‚úÖ Oui' : '‚ùå Non');
  }
}

// 7. SE D√âCONNECTER
async function testLogout() {
  await authAPI.logout();
  console.log('‚úÖ D√©connect√©');
}

// INSTRUCTIONS
console.log(`
üß™ EXEMPLES DE TEST - LexiFlow Backend Integration

1Ô∏è‚É£ testRegister() - Cr√©er un compte
2Ô∏è‚É£ testLogin() - Se connecter
3Ô∏è‚É£ testSaveFlashcard() - Sauvegarder une flashcard
4Ô∏è‚É£ testLoadFlashcards() - Charger les flashcards
5Ô∏è‚É£ testSyncLocal() - Synchroniser les flashcards locales
6Ô∏è‚É£ checkAuth() - V√©rifier l'authentification
7Ô∏è‚É£ testLogout() - Se d√©connecter

Commencez par testRegister() ou testLogin()
`);